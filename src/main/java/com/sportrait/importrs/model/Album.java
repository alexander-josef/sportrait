/*
 * Sportrait Import API
 * Initial Sportrait Import API description - an API to process events and photo imports on the Sportrait Server 
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@sportrait.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sportrait.importrs.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Date;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Album
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2020-12-27T16:10:38.199Z[GMT]")public class Album   {
  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("title")
  private String title = null;

  @JsonProperty("navTitle")
  private String navTitle = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("freeHighresDownload")
  private Boolean freeHighresDownload = false;

  @JsonProperty("applyLogoOnFineImages")
  private Boolean applyLogoOnFineImages = false;

  @JsonProperty("photosS3Uri")
  private String photosS3Uri = null;

  @JsonProperty("sponsorBarRelativeUrl")
  private String sponsorBarRelativeUrl = null;

  @JsonProperty("asvzLogoRelativeUrl")
  private String asvzLogoRelativeUrl = null;

  @JsonProperty("creationDate")
  private Date creationDate = null;

  /**
   * album publication status
   */
  public enum StatusEnum {
    HIDDEN("hidden"),
    
    PUBLISHED("published"),
    
    IMPORTING("importing");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }
  @JsonProperty("status")
  private StatusEnum status = null;

  public Album id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   **/
  @JsonProperty("id")
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Album title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   **/
  @JsonProperty("title")
  @Schema(example = "sola 2020 - etappe 12", required = true, description = "")
  @NotNull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Album navTitle(String navTitle) {
    this.navTitle = navTitle;
    return this;
  }

  /**
   * the slug of the album
   * @return navTitle
   **/
  @JsonProperty("navTitle")
  @Schema(example = "sola-2020-etappe-12", description = "the slug of the album")
  public String getNavTitle() {
    return navTitle;
  }

  public void setNavTitle(String navTitle) {
    this.navTitle = navTitle;
  }

  public Album description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   **/
  @JsonProperty("description")
  @Schema(example = "die 12. etappe der sola 2030", description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Album freeHighresDownload(Boolean freeHighresDownload) {
    this.freeHighresDownload = freeHighresDownload;
    return this;
  }

  /**
   * whether this album allows a free high resulation download of the digital image.
   * @return freeHighresDownload
   **/
  @JsonProperty("freeHighresDownload")
  @Schema(example = "true", description = "whether this album allows a free high resulation download of the digital image.")
  public Boolean isFreeHighresDownload() {
    return freeHighresDownload;
  }

  public void setFreeHighresDownload(Boolean freeHighresDownload) {
    this.freeHighresDownload = freeHighresDownload;
  }

  public Album applyLogoOnFineImages(Boolean applyLogoOnFineImages) {
    this.applyLogoOnFineImages = applyLogoOnFineImages;
    return this;
  }

  /**
   * whether to process the fine images with a logo or watermark. Default to false with the newer imgix based import.
   * @return applyLogoOnFineImages
   **/
  @JsonProperty("applyLogoOnFineImages")
  @Schema(example = "true", description = "whether to process the fine images with a logo or watermark. Default to false with the newer imgix based import.")
  public Boolean isApplyLogoOnFineImages() {
    return applyLogoOnFineImages;
  }

  public void setApplyLogoOnFineImages(Boolean applyLogoOnFineImages) {
    this.applyLogoOnFineImages = applyLogoOnFineImages;
  }

  public Album photosS3Uri(String photosS3Uri) {
    this.photosS3Uri = photosS3Uri;
    return this;
  }

  /**
   * location to find the images to be processed
   * @return photosS3Uri
   **/
  @JsonProperty("photosS3Uri")
  @Schema(example = "s3://dev.ireland.photos.sportrait.com/upload/2018-etappe-1-rekognition-test/", required = true, description = "location to find the images to be processed")
  @NotNull
  public String getPhotosS3Uri() {
    return photosS3Uri;
  }

  public void setPhotosS3Uri(String photosS3Uri) {
    this.photosS3Uri = photosS3Uri;
  }

  public Album sponsorBarRelativeUrl(String sponsorBarRelativeUrl) {
    this.sponsorBarRelativeUrl = sponsorBarRelativeUrl;
    return this;
  }

  /**
   * relative URL (without bucket) to sponsor bar - not used yet
   * @return sponsorBarRelativeUrl
   **/
  @JsonProperty("sponsorBarRelativeUrl")
  @Schema(example = "logo/2020/asvz-logo-2020.png", description = "relative URL (without bucket) to sponsor bar - not used yet")
  public String getSponsorBarRelativeUrl() {
    return sponsorBarRelativeUrl;
  }

  public void setSponsorBarRelativeUrl(String sponsorBarRelativeUrl) {
    this.sponsorBarRelativeUrl = sponsorBarRelativeUrl;
  }

  public Album asvzLogoRelativeUrl(String asvzLogoRelativeUrl) {
    this.asvzLogoRelativeUrl = asvzLogoRelativeUrl;
    return this;
  }

  /**
   * relative URL (without bucket) to logo - not used yet
   * @return asvzLogoRelativeUrl
   **/
  @JsonProperty("asvzLogoRelativeUrl")
  @Schema(example = "logo/2020/asvz-logo-2020.png", description = "relative URL (without bucket) to logo - not used yet")
  public String getAsvzLogoRelativeUrl() {
    return asvzLogoRelativeUrl;
  }

  public void setAsvzLogoRelativeUrl(String asvzLogoRelativeUrl) {
    this.asvzLogoRelativeUrl = asvzLogoRelativeUrl;
  }

  public Album creationDate(Date creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Creation Date / Time for this album as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
   * @return creationDate
   **/
  @JsonProperty("creationDate")
  @Schema(example = "2017-07-21T17:32:28Z", description = "Creation Date / Time for this album as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z")
  @Valid
  public Date getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(Date creationDate) {
    this.creationDate = creationDate;
  }

  public Album status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * album publication status
   * @return status
   **/
  @JsonProperty("status")
  @Schema(description = "album publication status")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Album album = (Album) o;
    return Objects.equals(this.id, album.id) &&
        Objects.equals(this.title, album.title) &&
        Objects.equals(this.navTitle, album.navTitle) &&
        Objects.equals(this.description, album.description) &&
        Objects.equals(this.freeHighresDownload, album.freeHighresDownload) &&
        Objects.equals(this.applyLogoOnFineImages, album.applyLogoOnFineImages) &&
        Objects.equals(this.photosS3Uri, album.photosS3Uri) &&
        Objects.equals(this.sponsorBarRelativeUrl, album.sponsorBarRelativeUrl) &&
        Objects.equals(this.asvzLogoRelativeUrl, album.asvzLogoRelativeUrl) &&
        Objects.equals(this.creationDate, album.creationDate) &&
        Objects.equals(this.status, album.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, navTitle, description, freeHighresDownload, applyLogoOnFineImages, photosS3Uri, sponsorBarRelativeUrl, asvzLogoRelativeUrl, creationDate, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Album {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    navTitle: ").append(toIndentedString(navTitle)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    freeHighresDownload: ").append(toIndentedString(freeHighresDownload)).append("\n");
    sb.append("    applyLogoOnFineImages: ").append(toIndentedString(applyLogoOnFineImages)).append("\n");
    sb.append("    photosS3Uri: ").append(toIndentedString(photosS3Uri)).append("\n");
    sb.append("    sponsorBarRelativeUrl: ").append(toIndentedString(sponsorBarRelativeUrl)).append("\n");
    sb.append("    asvzLogoRelativeUrl: ").append(toIndentedString(asvzLogoRelativeUrl)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
