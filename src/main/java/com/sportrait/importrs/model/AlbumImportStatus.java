/*
 * Sportrait Import API
 * Initial Sportrait Import API description - an API to process events and photo imports on the Sportrait Server 
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@sportrait.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sportrait.importrs.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;


/**
 * Contains status information for an album currently being imported
 */
@Schema(description = "Contains status information for an album currently being imported")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2021-01-28T13:02:09.948Z[GMT]")public class AlbumImportStatus   {
  @JsonProperty("photosImported")
  private Integer photosImported = null;

  @JsonProperty("photosRemaining")
  private Integer photosRemaining = null;

  @JsonProperty("importErrors")
  private Integer importErrors = null;

  @JsonProperty("queuedForNumberRecognition")
  private Integer queuedForNumberRecognition = null;

  public AlbumImportStatus photosImported(Integer photosImported) {
    this.photosImported = photosImported;
    return this;
  }

  /**
   * Get photosImported
   * @return photosImported
   **/
  @JsonProperty("photosImported")
  @Schema(description = "")
  public Integer getPhotosImported() {
    return photosImported;
  }

  public void setPhotosImported(Integer photosImported) {
    this.photosImported = photosImported;
  }

  public AlbumImportStatus photosRemaining(Integer photosRemaining) {
    this.photosRemaining = photosRemaining;
    return this;
  }

  /**
   * Get photosRemaining
   * @return photosRemaining
   **/
  @JsonProperty("photosRemaining")
  @Schema(description = "")
  public Integer getPhotosRemaining() {
    return photosRemaining;
  }

  public void setPhotosRemaining(Integer photosRemaining) {
    this.photosRemaining = photosRemaining;
  }

  public AlbumImportStatus importErrors(Integer importErrors) {
    this.importErrors = importErrors;
    return this;
  }

  /**
   * Get importErrors
   * @return importErrors
   **/
  @JsonProperty("importErrors")
  @Schema(description = "")
  public Integer getImportErrors() {
    return importErrors;
  }

  public void setImportErrors(Integer importErrors) {
    this.importErrors = importErrors;
  }

  public AlbumImportStatus queuedForNumberRecognition(Integer queuedForNumberRecognition) {
    this.queuedForNumberRecognition = queuedForNumberRecognition;
    return this;
  }

  /**
   * Get queuedForNumberRecognition
   * @return queuedForNumberRecognition
   **/
  @JsonProperty("queuedForNumberRecognition")
  @Schema(description = "")
  public Integer getQueuedForNumberRecognition() {
    return queuedForNumberRecognition;
  }

  public void setQueuedForNumberRecognition(Integer queuedForNumberRecognition) {
    this.queuedForNumberRecognition = queuedForNumberRecognition;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlbumImportStatus albumImportStatus = (AlbumImportStatus) o;
    return Objects.equals(this.photosImported, albumImportStatus.photosImported) &&
        Objects.equals(this.photosRemaining, albumImportStatus.photosRemaining) &&
        Objects.equals(this.importErrors, albumImportStatus.importErrors) &&
        Objects.equals(this.queuedForNumberRecognition, albumImportStatus.queuedForNumberRecognition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(photosImported, photosRemaining, importErrors, queuedForNumberRecognition);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlbumImportStatus {\n");
    
    sb.append("    photosImported: ").append(toIndentedString(photosImported)).append("\n");
    sb.append("    photosRemaining: ").append(toIndentedString(photosRemaining)).append("\n");
    sb.append("    importErrors: ").append(toIndentedString(importErrors)).append("\n");
    sb.append("    queuedForNumberRecognition: ").append(toIndentedString(queuedForNumberRecognition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
