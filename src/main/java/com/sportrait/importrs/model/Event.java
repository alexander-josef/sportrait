/*
 * Sportrait Import API
 * Initial Sportrait Import API description - an API to process events and photo imports on the Sportrait Server 
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@sportrait.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.sportrait.importrs.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Event
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2020-11-22T14:33:43.658Z[GMT]")public class Event   {
  @JsonProperty("id")
  private Long id = null;

  @JsonProperty("title")
  private String title = null;

  @JsonProperty("navTitle")
  private String navTitle = null;

  @JsonProperty("organizerUrl")
  private String organizerUrl = null;

  @JsonProperty("date")
  private Date date = null;

  @JsonProperty("zipCode")
  private String zipCode = null;

  @JsonProperty("city")
  private String city = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("eventCategories")
  private List<EventCategory> eventCategories = null;

  /**
   * event status
   */
  public enum StatusEnum {
    NEW("new"),
    
    MAPPED("mapped"),
    
    ONLINE("online");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }
  @JsonProperty("status")
  private StatusEnum status = null;

  public Event id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   **/
  @JsonProperty("id")
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Event title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   **/
  @JsonProperty("title")
  @Schema(example = "sola 2020", required = true, description = "")
  @NotNull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Event navTitle(String navTitle) {
    this.navTitle = navTitle;
    return this;
  }

  /**
   * Get navTitle
   * @return navTitle
   **/
  @JsonProperty("navTitle")
  @Schema(example = "sola 2020", required = true, description = "")
  @NotNull
  public String getNavTitle() {
    return navTitle;
  }

  public void setNavTitle(String navTitle) {
    this.navTitle = navTitle;
  }

  public Event organizerUrl(String organizerUrl) {
    this.organizerUrl = organizerUrl;
    return this;
  }

  /**
   * Get organizerUrl
   * @return organizerUrl
   **/
  @JsonProperty("organizerUrl")
  @Schema(example = "https://asvz.ch/sola", required = true, description = "")
  @NotNull
  public String getOrganizerUrl() {
    return organizerUrl;
  }

  public void setOrganizerUrl(String organizerUrl) {
    this.organizerUrl = organizerUrl;
  }

  public Event date(Date date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   **/
  @JsonProperty("date")
  @Schema(description = "")
  @Valid
  public Date getDate() {
    return date;
  }

  public void setDate(Date date) {
    this.date = date;
  }

  public Event zipCode(String zipCode) {
    this.zipCode = zipCode;
    return this;
  }

  /**
   * Get zipCode
   * @return zipCode
   **/
  @JsonProperty("zipCode")
  @Schema(example = "8000", description = "")
  public String getZipCode() {
    return zipCode;
  }

  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }

  public Event city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   **/
  @JsonProperty("city")
  @Schema(example = "Zurich", description = "")
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }

  public Event description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   **/
  @JsonProperty("description")
  @Schema(example = "Die 20182-te Durchführung der Sola führt rund um Zürich", description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Event eventCategories(List<EventCategory> eventCategories) {
    this.eventCategories = eventCategories;
    return this;
  }

  public Event addEventCategoriesItem(EventCategory eventCategoriesItem) {
    if (this.eventCategories == null) {
      this.eventCategories = new ArrayList<EventCategory>();
    }
    this.eventCategories.add(eventCategoriesItem);
    return this;
  }

  /**
   * Get eventCategories
   * @return eventCategories
   **/
  @JsonProperty("eventCategories")
  @Schema(description = "")
  @Valid
  public List<EventCategory> getEventCategories() {
    return eventCategories;
  }

  public void setEventCategories(List<EventCategory> eventCategories) {
    this.eventCategories = eventCategories;
  }

  public Event status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * event status
   * @return status
   **/
  @JsonProperty("status")
  @Schema(description = "event status")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Event event = (Event) o;
    return Objects.equals(this.id, event.id) &&
        Objects.equals(this.title, event.title) &&
        Objects.equals(this.navTitle, event.navTitle) &&
        Objects.equals(this.organizerUrl, event.organizerUrl) &&
        Objects.equals(this.date, event.date) &&
        Objects.equals(this.zipCode, event.zipCode) &&
        Objects.equals(this.city, event.city) &&
        Objects.equals(this.description, event.description) &&
        Objects.equals(this.eventCategories, event.eventCategories) &&
        Objects.equals(this.status, event.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, navTitle, organizerUrl, date, zipCode, city, description, eventCategories, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Event {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    navTitle: ").append(toIndentedString(navTitle)).append("\n");
    sb.append("    organizerUrl: ").append(toIndentedString(organizerUrl)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    eventCategories: ").append(toIndentedString(eventCategories)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
