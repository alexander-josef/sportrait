/*
 * Sportrait Import API
 * Initial Sportrait Import API description - an API to process events and photo imports on the Sportrait Server 
 *
 * OpenAPI spec version: 0.0.1
 * Contact: info@sportrait.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package com.sportrait.importrs.model;


import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.Date;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * Represents the data for a location with photos ready to be imported as an album
 */
@Schema(description = "Represents the data for a location with photos ready to be imported as an album")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2021-01-26T14:58:34.533Z[GMT]")public class Importable   {
  @JsonProperty("photosS3Uri")
  private String photosS3Uri = null;

  @JsonProperty("label")
  private String label = null;

  @JsonProperty("uploadDate")
  private Date uploadDate = null;

  @JsonProperty("numberOfPhotos")
  private Integer numberOfPhotos = null;

  public Importable photosS3Uri(String photosS3Uri) {
    this.photosS3Uri = photosS3Uri;
    return this;
  }

  /**
   * Get photosS3Uri
   * @return photosS3Uri
   **/
  @JsonProperty("photosS3Uri")
  @Schema(example = "s3://dev.ireland.photos.sportrait.com/upload/2018-etappe-1-rekognition-test/", required = true, description = "")
  @NotNull
  public String getPhotosS3Uri() {
    return photosS3Uri;
  }

  public void setPhotosS3Uri(String photosS3Uri) {
    this.photosS3Uri = photosS3Uri;
  }

  public Importable label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   **/
  @JsonProperty("label")
  @Schema(example = "2018-etappe-1-rekognition", required = true, description = "")
  @NotNull
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public Importable uploadDate(Date uploadDate) {
    this.uploadDate = uploadDate;
    return this;
  }

  /**
   * The date/time the photos of this importable have been uploaded.
   * @return uploadDate
   **/
  @JsonProperty("uploadDate")
  @Schema(description = "The date/time the photos of this importable have been uploaded.")
  @Valid
  public Date getUploadDate() {
    return uploadDate;
  }

  public void setUploadDate(Date uploadDate) {
    this.uploadDate = uploadDate;
  }

  public Importable numberOfPhotos(Integer numberOfPhotos) {
    this.numberOfPhotos = numberOfPhotos;
    return this;
  }

  /**
   * The number of photo files available in this importable location. 
   * @return numberOfPhotos
   **/
  @JsonProperty("numberOfPhotos")
  @Schema(example = "20", description = "The number of photo files available in this importable location. ")
  public Integer getNumberOfPhotos() {
    return numberOfPhotos;
  }

  public void setNumberOfPhotos(Integer numberOfPhotos) {
    this.numberOfPhotos = numberOfPhotos;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Importable importable = (Importable) o;
    return Objects.equals(this.photosS3Uri, importable.photosS3Uri) &&
        Objects.equals(this.label, importable.label) &&
        Objects.equals(this.uploadDate, importable.uploadDate) &&
        Objects.equals(this.numberOfPhotos, importable.numberOfPhotos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(photosS3Uri, label, uploadDate, numberOfPhotos);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Importable {\n");
    
    sb.append("    photosS3Uri: ").append(toIndentedString(photosS3Uri)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    uploadDate: ").append(toIndentedString(uploadDate)).append("\n");
    sb.append("    numberOfPhotos: ").append(toIndentedString(numberOfPhotos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
